# TechBra Order Service - Default Configuration
# Microservice responsible for order management and processing

spring:
  application:
    name: order-service
  
  # Database configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/techbra_orders}
    username: ${DB_USERNAME:techbra_user}
    password: ${DB_PASSWORD:techbra_pass}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:validate}
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  
  # Message broker configuration (RabbitMQ)
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}

server:
  port: 8083

# External service integrations
services:
  customer:
    url: ${CUSTOMER_SERVICE_URL:http://localhost:8081/api}
    timeout: ${CUSTOMER_SERVICE_TIMEOUT:3000}
  
  product-catalog:
    url: ${PRODUCT_CATALOG_SERVICE_URL:http://localhost:8082/api}
    timeout: ${PRODUCT_CATALOG_SERVICE_TIMEOUT:3000}
  
  billing:
    url: ${BILLING_SERVICE_URL:http://localhost:8084/api}
    timeout: ${BILLING_SERVICE_TIMEOUT:5000}
  
  inventory:
    url: ${INVENTORY_SERVICE_URL:http://localhost:8087/api}
    timeout: ${INVENTORY_SERVICE_TIMEOUT:3000}
  
  notification:
    url: ${NOTIFICATION_SERVICE_URL:http://localhost:8086/api}
    timeout: ${NOTIFICATION_SERVICE_TIMEOUT:3000}
  
  config:
    url: ${CONFIG_SERVICE_URL:http://localhost:8888}

# Order service specific configuration
order:
  processing:
    timeout: 300000 # 5 minutes
    max-items-per-order: 50
    auto-cancel-timeout: 1800000 # 30 minutes
  
  payment:
    timeout: 60000 # 1 minute
    retry-attempts: 3
  
  inventory:
    reservation-timeout: 600000 # 10 minutes
    auto-release: true
  
  status:
    transitions:
      pending-to-confirmed: 300000 # 5 minutes
      confirmed-to-processing: 60000 # 1 minute
      processing-to-shipped: 86400000 # 24 hours

# Circuit breaker configuration
resilience4j:
  circuitbreaker:
    instances:
      customer-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      
      product-catalog-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      
      billing-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 30
        wait-duration-in-open-state: 60s
      
      inventory-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 40
        wait-duration-in-open-state: 30s
  
  retry:
    instances:
      billing-service:
        max-attempts: 3
        wait-duration: 1000ms
        enable-exponential-backoff: true
      
      inventory-service:
        max-attempts: 2
        wait-duration: 500ms

# Message queues configuration
rabbitmq:
  exchanges:
    order-events: order.events
    order-dlx: order.dlx
  
  queues:
    order-created: order.created
    order-updated: order.updated
    order-cancelled: order.cancelled
    payment-processed: payment.processed
    inventory-reserved: inventory.reserved
    inventory-released: inventory.released
  
  routing-keys:
    order-created: order.created
    order-confirmed: order.confirmed
    order-cancelled: order.cancelled
    payment-success: payment.success
    payment-failed: payment.failed

# Logging configuration
logging:
  level:
    com.techbra: INFO
    org.springframework.amqp: INFO
    root: INFO

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    rabbit:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# Application info
info:
  app:
    name: ${spring.application.name}
    description: Order Management and Processing Service
    version: 1.0.0-SNAPSHOT
  features:
    - "Order lifecycle management"
    - "Payment integration"
    - "Inventory reservation"
    - "Event-driven architecture"
    - "RabbitMQ messaging"